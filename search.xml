<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python 语法基础]]></title>
    <url>%2F2018%2F01%2F01%2Fpython-basic%2F</url>
    <content type="text"><![CDATA[Python 语法基础整理归纳自 CS231nThis tutorial was contributed by Justin Johnson. basic types1234567891011121314x = 3print(type(x)) # Prints "&lt;class 'int'&gt;"print(x) # Prints "3"print(x + 1) # Addition; prints "4"print(x - 1) # Subtraction; prints "2"print(x * 2) # Multiplication; prints "6"print(x ** 2) # Exponentiation; prints "9"x += 1print(x) # Prints "4"x *= 2print(x) # Prints "8"y = 2.5print(type(y)) # Prints "&lt;class 'float'&gt;"print(y, y + 1, y * 2, y ** 2) # Prints "2.5 3.5 5.0 6.25" string12345678910111213141516hello = 'hello' # String literals can use single quotesworld = "world" # or double quotes; it does not matter.print(hello) # Prints "hello"print(len(hello)) # String length; prints "5"hw = hello + ' ' + world # String concatenationprint(hw) # prints "hello world"hw12 = '%s %s %d' % (hello, world, 12) # sprintf style string formattingprint(hw12) # prints "hello world 12"s = "hello"print(s.capitalize()) # Capitalize a string; prints "Hello"print(s.upper()) # Convert a string to uppercase; prints "HELLO"print(s.rjust(7)) # Right-justify a string, padding with spaces; prints " hello"print(s.center(7)) # Center a string, padding with spaces; prints " hello "print(s.replace('l', '(ell)')) # Replace all instances of one substring with another; # prints "he(ell)(ell)o"print(' world '.strip()) # Strip leading and trailing whitespace; prints "world" containerlist123456789xs = [3, 1, 2] # Create a listprint(xs, xs[2]) # Prints "[3, 1, 2] 2"print(xs[-1]) # Negative indices count from the end of the list; prints "2"xs[2] = 'foo' # Lists can contain elements of different typesprint(xs) # Prints "[3, 1, 'foo']"xs.append('bar') # Add a new element to the end of the listprint(xs) # Prints "[3, 1, 'foo', 'bar']"x = xs.pop() # Remove and return the last element of the listprint(x, xs) # Prints "bar [3, 1, 'foo']" slicing123456789nums = list(range(5)) # range is a built-in function that creates a list of integersprint(nums) # Prints "[0, 1, 2, 3, 4]"print(nums[2:4]) # Get a slice from index 2 to 4 (exclusive); prints "[2, 3]"print(nums[2:]) # Get a slice from index 2 to the end; prints "[2, 3, 4]"print(nums[:2]) # Get a slice from the start to index 2 (exclusive); prints "[0, 1]"print(nums[:]) # Get a slice of the whole list; prints "[0, 1, 2, 3, 4]"print(nums[:-1]) # Slice indices can be negative; prints "[0, 1, 2, 3]"nums[2:4] = [8, 9] # Assign a new sublist to a sliceprint(nums) # Prints "[0, 1, 8, 9, 4]” loops1234animals = ['cat', 'dog', 'monkey']for animal in animals: print(animal)# Prints "cat", "dog", "monkey", each on its own line. If you want access to the index of each element within the body of a loop, use the built-in enumerate function:1234animals = ['cat', 'dog', 'monkey']for idx, animal in enumerate(animals): print('#%d: %s' % (idx + 1, animal))# Prints "#1: cat", "#2: dog", "#3: monkey", each on its own line list comprehension12345nums = [0, 1, 2, 3, 4]squares = []for x in nums: squares.append(x ** 2)print(squares) # Prints [0, 1, 4, 9, 16] You can make this code simpler using a list comprehension:123nums = [0, 1, 2, 3, 4]squares = [x ** 2 for x in nums]print(squares) # Prints [0, 1, 4, 9, 16] List comprehensions can also contain conditions:123nums = [0, 1, 2, 3, 4]even_squares = [x ** 2 for x in nums if x % 2 == 0]print(even_squares) # Prints "[0, 4, 16]” dictionary1234567891011121314151617181920d = &#123;'cat': 'cute', 'dog': 'furry'&#125; # Create a new dictionary with some dataprint(d['cat']) # Get an entry from a dictionary; prints "cute"print('cat' in d) # Check if a dictionary has a given key; prints "True"d['fish'] = 'wet' # Set an entry in a dictionaryprint(d['fish']) # Prints "wet"# print(d['monkey']) # KeyError: 'monkey' not a key of dprint(d.get('monkey', 'N/A')) # Get an element with a default; prints "N/A"print(d.get('fish', 'N/A')) # Get an element with a default; prints "wet"del d['fish'] # Remove an element from a dictionaryprint(d.get('fish', 'N/A')) # "fish" is no longer a key; prints "N/A"d = &#123;'person': 2, 'cat': 4, 'spider': 8&#125;for animal, legs in d.items(): print('A %s has %d legs' % (animal, legs))# Prints "A person has 2 legs", "A cat has 4 legs", "A spider has 8 legs"Dictionary comprehensions: These are similar to list comprehensions, but allow you to easily construct dictionaries. For example:nums = [0, 1, 2, 3, 4]even_num_to_square = &#123;x: x ** 2 for x in nums if x % 2 == 0&#125;print(even_num_to_square) # Prints "&#123;0: 0, 2: 4, 4: 16&#125;” sets12345678910animals = &#123;'cat', 'dog'&#125;print('cat' in animals) # Check if an element is in a set; prints "True"print('fish' in animals) # prints "False"animals.add('fish') # Add an element to a setprint('fish' in animals) # Prints "True"print(len(animals)) # Number of elements in a set; prints "3"animals.add('cat') # Adding an element that is already in the set does nothingprint(len(animals)) # Prints "3"animals.remove('cat') # Remove an element from a setprint(len(animals)) # Prints “2" tuples12345d = &#123;(x, x + 1): x for x in range(10)&#125; # Create a dictionary with tuple keyst = (5, 6) # Create a tupleprint(type(t)) # Prints "&lt;class 'tuple'&gt;"print(d[t]) # Prints "5"print(d[(1, 2)]) # Prints “1"]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown 语法笔记]]></title>
    <url>%2F2017%2F12%2F31%2Fmarkdown%2F</url>
    <content type="text"><![CDATA[Markdown是一种极简的『标记语言』之前做读书笔记，基本都是随手记录，苦于不想花时间在排版上，但是不排版的后果是笔记没有层次感。Markdown正是我需要的东西。 语法笔记如下 区块元素段落和换行一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行。 标题类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶。例如 # 这是 H1## 这是 H2 区块引用 BlockquotesMarkdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ：Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt;区块引用可以嵌套引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：例如 > This is the first level of quoting.>> > This is nested blockquote.>> Back to the first level. 效果 This is the first level of quoting. This is nested blockquote. Back to the first level. 列表无序列表使用星号、加号或是减号作为列表标记：有序列表则使用数字接着一个英文句点： * Red* Green* Blue 效果 Red Green Blue 代码区块要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以 分隔线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。 区段元素链接要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可。例如 This is an example inline link. 参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：例如 This is [an example][id] reference-style link.接着，在文件的任意处，你可以把这个标记的链接内容定义出来：[id]: http://example.com/ “Optional Title Here” 强调Markdown 使用星号（）和底线（_）作为标记强调字词的符号，被 或 包围的字词会被转成斜体，用两个 * 或 包起来的话，则会被转成粗体，例如： *single asterisks*_single underscores_**double asterisks**__double underscores__ 效果 single asteriskssingle underscoresdouble asterisksdouble underscores 代码如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如： Use the `printf()` function. 效果 Use the printf() function. 图片Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。行内式的图片语法看起来像是： ![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg “Optional title”) 其它自动链接Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样。 反斜杠Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号。 \ 反斜线` 反引号* 星号_ 底线{} 花括号[] 方括号() 括弧# 井字号+ 加号- 减号. 英文句点! 惊叹号]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
