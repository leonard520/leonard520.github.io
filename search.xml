<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Effective Java读书笔记-12]]></title>
    <url>%2F2018%2F04%2F05%2Feffective-java-12%2F</url>
    <content type="text"><![CDATA[考虑实现Comparable接口compareTo是Comparable接口中唯一方法。compareTo不但允许进行简单的比较，还允许执行顺序比较。一旦类实现了Comparable接口，就可以和很多泛型算法及依赖于该接口的集合实现进行coding，如果一个类有明显的内在排序关系，就应该实现这个接口。123public interface Comparable&lt;T&gt;()&#123; int compareTo(T t);&#125; compareTo方法遵守equals约定遵守的限制条件。当你实现了一个Comparable接口的类，请不要扩展它，而是编写另外一个类，其中包含第一个类的一个实例。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, effective Java, 读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Effective Java读书笔记-11]]></title>
    <url>%2F2018%2F04%2F05%2Feffective-java-11%2F</url>
    <content type="text"><![CDATA[谨慎覆盖cloneclone方法的约定： x.clone() != x x.clone().getClass == x.getClass() x.clone().equals(x)如果对象中包含的域引用了可变的对象，则需要对可变对象进行clone，有时候还需要对对象deep copy。总之，所有实现了cloneable接口的类都应该正确覆盖clone。首先调用super.clone，然后修正需要修正的域，包括深层copy，但是也有例外，比如代表序号或其他唯一ID的域，或者代表创建时间的域，都需要被修正。另一个实现对象拷贝的方法是提供一个copy constructor或者copy factory，这样不依赖于语言之外的对象创建机制。更进一步，这样可以带参数。正是因为cloneable接口具有的这些问题，所以除非能提供行为良好的受保护的clone方法，否则不应该去实现。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, effective Java, 读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Effective Java读书笔记-10]]></title>
    <url>%2F2018%2F04%2F05%2Feffective-java-10%2F</url>
    <content type="text"><![CDATA[始终覆盖toString当对象被传递给println, printf，字符串操作符及assert或者被调试器打印出来时，toString方法会被自动调用]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, effective Java, 读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Effective Java读书笔记-9]]></title>
    <url>%2F2018%2F04%2F05%2Feffective-java-9%2F</url>
    <content type="text"><![CDATA[覆盖equals总要覆盖hashCode 在应用程序的一次执行期间，只要对象的equals方法的比较操作所用的信息没有被修改，那么对这个对象调用多次，hashCode方法都必须始终如一地返回同一个整数。在同一个应用程序的多次执行过程中，每次执行所返回的整数可以不一致 如果两个对象根据equals(Object)方法比较结果相等的，那么调用这两个对象中任意一个对象的hashCode方法都必须产生同样的整数结果。 如果两个对象根据equals(Object)方法比较是不相等的，那么调用这两个对象中任意一个对象的hashCode方法不一定要产生不一样的整数结果。但是我们应该知道，给不相等的对象产生不相同的整数结果，可以提高散列表(hashtable)的性能。相等的对象必须具有相等的散列码，并且一个好的散列函数通常倾向于为不相等的对象产生不相等的散列码。hashcode简单的实现 int result = 17; 对每个关键域（equals方法中涉及的每个域），进行result = 32 * result + f对boolean，f ? 1:0对byte， char， short或者int，计算(int)f对long，计算(int)(f ^ f &gt;&gt;&gt; 32))对float， 计算Float.floatToIntBits(f)对double，计算Double.doubleToLongBits(f)，然后进行对long的操作对一个对象引用，则递归调用hashcode对域是一个数组，把每个元素当成单独的域来处理 如果一个类是不可变的，考虑把散列码缓存在对象内部]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, effective Java, 读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java并发编程实战]]></title>
    <url>%2F2018%2F04%2F01%2Fjava-concurrency-in-practice%2F</url>
    <content type="text"><![CDATA[基础知识线程安全性确保多线程访问不会出错：不在线程之间共享状态变量；把状态变量设为不可变；使用同步 线程安全性的定义中，最核心的概念就是正确性；在线程安全类中封装了必要的同步机制，则客户端无须进一步采取同步 原子性与竞态条件 加锁机制。Java提供了内置锁机制支持原子性，同步代码块（synchronized block）synchronized (lock) {}每个Java对象都可以用作一个实现同步的锁，线程在进入同步代码块之前会自动获得锁，并且在退出时自动释放（无论正常逻辑或异常抛出）Java内置锁相当于一种互斥体，最多只有一个线程持有这种锁。当某个线程请求一个由其他线程持有的锁时，发出请求的线程就会阻塞，由于内置锁是可重入的，所以某个线程试图获得一个已经由它已经持有的锁，请求会成功。重入的实现方法是为每个锁关联一个计数值和所有者线程。进入同步块加1，退出同步块减1，计数值为0时，锁被释放。用锁来保护状态。多个线程访问变量需要持有同一个锁，则称状态变量由锁保护。一种常见的锁约定是将所有的可变状态封装在对象内，并用对象的内置锁来同步。 活跃性与性能，需要平衡 对象共享 可见性。当读操作和写操作在不同的线程中，对某变量写入然后读取这个值，并非总能得到相同的值。在没有同步的情况下，编译器、处理器以及运行时都可能对操作的执行顺序进行调整，要想对内存操作的执行顺序进行判断，是不可能的。加锁的含义不仅局限于互斥行为，还包括内存可见性，为了确保所有线程都能看到共享变量的最新值，所有执行读操作或写操作都必须在同一锁上同步。volatile类型。编译器与运行时都会注意到这个变量是共享的，不会重排序或是缓存到寄存器或者其他处理器不可见的地方。 发布与逸出。发布指使对象能够在当前作用域之外的代码中使用，例如将对象的引用保存到一个公有的静态变量中。不要在构造过程中使this引用逸出 线程封闭，例如局部变量和ThreadLocal（每个线程都会拥有属于自己的对象） 不变性。满足以下条件，对象创建后不能修改；所有域是final；正确创建并没有逸出 安全发布。对象的引用及状态必须对其它线程可见：在静态初始化函数中初始化；将对象引用保存到volatile或atomicReference；将对象引用保存到正确构造对象；将对象引用保存到由锁保护的域。为了安全的共享对象，策略包括：线程封闭；只读共享；线程安全共享（在对象内部实现同步）；保护对象（通过特定锁） 对象组合 设计线程安全的类。找出构成对象状态的所有变量；找出约束状态变量的不变性条件；建立对象状态的并发访问管理策略 实例封闭。将数据封装在对象内部，可以将数据的访问限制在对象的方法上。 在现有的线程安全类中添加功能 线程安全性的委托，例如委托给atomicInteger 基础构建模块 同步容器类：Vector和Hashtable，线程安全，但是仍然需要额外的锁来保护复合操作 并发容器：ConcurrentHashMap。由于ConcurrentHashMap不能被加锁来执行独占访问，一些常见的复合操作都已经实现为原子操作；copyOnWriteArrayList用于替代同步list，它的安全性在于只要正确发布了一个事实不可改变的对象，那么在访问时就不需要进一步同步，每次修改时都会创建并重新发布一个新的容器副本。 阻塞队列和生产者消费者模式，提供put和take方法以及支持定时的offer和pull方法。BlockingQueue维护一组线程，这些线程在等待着把元素加入或移除队列。 阻塞与中断方法 同步工具类。semaphore， barrier，latch 小结：可变状态是至关重要的，不可变对象一定是线程安全的尽量将域声明为final封装有助于管理复杂性用锁保护可变变量，并且保护同一个不变性条件中的所有变量时，要使用同一个锁；在执行复合操作期间，要持有锁不要故作聪明的推断出不需要使用同步同步策略文档化 结构化并发应用程序任务执行Executor框架 执行策略：newFixedThreadPool, 固定长度，如果某个线程由于发生未预期的exception，将会补充一个新的newCachedThreadPool，灵活回收和添加，不存在限制newSingleThreadExecutor，单线程newScheduledThreadPool，固定长度，延时或定时 callable和future completionService，在计算完成后获得结果 为任务设置时限 取消与关闭 任务取消。通常，中断是实现取消的最合理方式。当检查到中断请求时，在完成任务后抛出interruptedException表示收到。调用可中断的阻塞函数，例如thread.sleep和blockingQueue.wait，可以传递异常或恢复中断状态。如果代码不会调用可中断的阻塞方法，那么仍然可以通过在任务代码中轮询当前线程的中断状态 通过future中断 停止基于线程的服务。 处理非正常的线程终止 JVM关闭。使用钩子，守护线程，终结器（避免） 线程池的使用图形用户界面活跃性性能与测试避免活跃性危险 锁顺序死锁。如果所有线程以固定顺序来获得锁，那么就不会出现锁顺序死锁问题 动态的锁顺序死锁 协作对象之间发生死锁。如果锁持有某个外部方法，就会出现活跃性问题。 开放调用以及锁顺序的依赖，反应在构造同步对象（而不是对已构造好的对象进行同步），在程序中应尽量使用开放调用。 资源死锁以及饥饿死锁 为了避免死锁，支持定时的锁 其他活跃性危险：饥饿（避免使用线程优先级），活锁（重试引入随机性）小结：死锁后除了终止应用之外，没有其他机制。 性能与可伸缩性 amdahl定律。N为处理器数量 线程引入的开销：上下文切换；内存同步；阻塞 减少锁的竞争：缩小锁的范围；减小锁的粒度；锁分段；避免热点；一些替代独占锁的方法（并发容器，读写锁，不可变对象以及原子变量） 不要用对象池 并发程序的测试 正确性测试：单元测试；阻塞测试；安全性测试（countDownLatch和cyclicBarrier） 吞吐量，响应性，可伸缩性 测试陷阱：垃圾回收影响结果；动态编译（运行足够长时间）；代码路径偏差；不真实的竞争；无用代码的消除（程序里有） 高级主题显示锁 ReentrantLock，轮询锁与定时锁避免死锁；可以中断等待获取锁的线程；可以无限等下去；ReentrantLock性能更好；提供公平和非公平 读写锁：可选实现：释放优先（读与写谁优先）；重入性；降级；升级 构建自定义的同步工具 状态依赖性的管理。在条件等待中存在一种重要的三元关系，包括加锁，wait方法和一个条件谓词。条件谓词包含多个状态变量，而状态变量用一个锁来保护。锁对象与条件队列队形必须是同一个对象。如果条件谓词不为真，wait方法将释放锁，阻塞当前线程，并等待直到超时，然后线程被中断或者通过一个通知被唤醒。在唤醒进程后，wait在返回前还要重新获取锁。当线程从wait方法中被唤醒时，它在重新请求锁时不具有任何特殊的优先级。 过早唤醒：每次必须检查条件谓词；丢失的信号：如果A通知了一个条件队列，而B随后在这个条件队列等待，那么B将不会立即醒来 通知：notify及notifyAll。 显示condition对象，在每个锁上存在多个等待、条件等待可以是中断/非中断的，基于时限的，以及公平/非公平的对列操作。 AQShttp://www.cnblogs.com/waterystone/p/4920797.html 原子变量与非阻塞同步机制 与基于锁的方案相比，非阻塞算法在设计和实现上要复杂的多，但他们在伸缩性和活跃性上却又巨大的优势。对于一些线程被挂起并且稍后恢复运行，必须等待其他线程执行完它们的时间片，并且在挂起和恢复过程中存在很大的开销；并且当线程在持有锁的情况下被延迟执行，所有需要的锁的线程都将无法执行。 硬件对并发的支持：比较并交换（CAS） 原子变量类。 Java内存模型编译器中生成的指令顺序可以与源代码中的不同，此外编译器还会把变量保存在寄存器而不是内存中。Java底层技术除了提高程序的执行速度外，不会产生其他影响JMM规定了JVM必须遵循一组最小保证，这组保证规定了对变量的写入操作何时对其他线程可见。 平台的内存模型。每个处理器都拥有自己的缓存，并且定期的与主内存协调。处理器会适当放宽存储一致性保证，以换取性能的提升。内存模型*定义了一些特殊的指令，称为内存栅栏。 重排序。同步将限制编译器、运行时和硬件对内存操作重排序的方式，从而保证JMM提供的可见性保证 Java内存模型简介。JMM为程序操作定义了一个偏序关系，称为happens-before程序顺序规则：如果程序操作A在B之前，那么线程中A在B之前。监视器锁规则：在监视器锁上解锁必须在同一监视器的加锁之前。volatile变量规则：对一个volatile域的写，happens- before 于任意后续对这个volatile域的读。传递性：如果A happens- before B，且B happens- before C，那么A happens- before C。 借助同步。例如在FutureTask在调用tryAcquireShared之前总能成功调用tryReleaseShared，就可以保证innerSet中写入操作在innerGet中的读取操作之前。 发布。除了不可变对象以外，使用被另一个线程初始化的对象通常都不安全。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, Concurrent, 读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Effective Java读书笔记-8]]></title>
    <url>%2F2018%2F04%2F01%2Feffective-java-8%2F</url>
    <content type="text"><![CDATA[对所有对象都通用方法object的所有非final方法（equals, hashCode, toString, clone, finalize）都有明确约定，被设计成需要覆盖的（override） 覆盖equals请遵守通用约定 自反，对于任何非null的引用值x, x.equals(x)返回true 对称，对于任何非null的引用值x,y，x.equals(y)返回true的时候，y.equals(x)返回true 传递，对于任何非null的引用值x,y,z，x.equals(y)返回true，y.equals(z)返回true的时候, x.equals(z)返回true 一致，多次调用x.equals(y)返回一致 对于任何非null的引用值x, x.equals(null)返回false]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, effective Java, 读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Effective Java读书笔记-7]]></title>
    <url>%2F2018%2F04%2F01%2Feffective-java-7%2F</url>
    <content type="text"><![CDATA[避免使用终结方法终结方法（finalizer）通常是不可预测的，一般情况不要使用。当然终结方法也有可取之处，但是应该尽量避免使用终结方法终结方法的缺点在于不能保证会被及时的执行，所以注重时间的任务不该由终结方法来完成。不应该依赖终结方法来更新重要的持久状态System.gc和System.runFinalization不保证终结方法一定会被执行如果未捕获的异常在终结过程被抛出来，那么异常会被忽略。如果另一个线程企图使用这种被破坏的对象，这是危险的性能损失。创建和销毁对象大约为5.6ns，增加终结方法使时间增加到了2400ns如果使用终结方法，必须显示提供一个方法，并且在类里记录自己是否被终止。例如InputSteam中的close方法。 终结方法的好处：在忘记调用显式终止方法时，充当安全网普通对象通过本地方法（native method）委托给一个本地对等体（native peer），因为本地对等体不是一个普通对象，所以垃圾回收器不会知道它，当它的Java对等体被回收的时候，它不会被回收。本地对等体就需要一个显式的终止方法。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, effective Java, 读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Effective Java读书笔记-6]]></title>
    <url>%2F2018%2F04%2F01%2Feffective-java-6%2F</url>
    <content type="text"><![CDATA[消除过期的对象引用（当自己管理内存时，缓存）在支持垃圾回收的语言中，内存泄露是很隐蔽的 一旦对象引用过期，清空他们，将他们设为null。当程序员自己管理内存时，就应该警惕内存泄露 缓存。使用weakHashMap，缓存的生命周期是由该键的外部引用而不是值决定 weak reference。一般借助于heap剖析工具检查内存情况 Note当一个对象仅仅被weak reference（弱引用）指向, 而没有任何其他strong reference（强引用）指向的时候, 如果GC运行, 那么这个对象就会被回收。weak reference的语法是:12WeakReference&lt;T&gt; weakref = new WeakReference&lt;T&gt;();weakref.get(); WeakHashMap其实和HashMap用法类似，它们之间唯一的区别就是：HashMap中的key保存的是实际对象的强引用，因此只要对象不被销毁，即该key所对应的key-value都不会被垃圾回收机制回收。但是WeakHashMap保存的实际对象是弱引用，这意味着只要该对象没有被强对象引用就有可能会被垃圾回收机制回收对应的Key-value。示例如下：12345678910111213import java.util.WeakHashMap; public class WeakHashMapTest &#123; public static void main(String[] args) &#123; WeakHashMap w= new WeakHashMap(); w.put(new String(“temp"),new String(“temp value")); w.put(“static", new String(“static value")); System.out.println(w); System.gc(); System.runFinalization(); System.out.println(w); &#125; &#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, effective Java, 读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Effective Java读书笔记-5]]></title>
    <url>%2F2018%2F04%2F01%2Feffective-java-5%2F</url>
    <content type="text"><![CDATA[避免创建不必要的对象 String = “abc”而不是String = new String(“abc”) 静态工厂，例如Boolean.True 优先使用基本类型，避免无意识的自动装箱。反之，用对象池避免创建对象也并不是好的做法，除非对象是非常重量级的（数据库连接）]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, effective Java, 读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Effective Java读书笔记-4]]></title>
    <url>%2F2018%2F03%2F28%2Feffective-java-4%2F</url>
    <content type="text"><![CDATA[通过私有构造器强化不可实例的能力编写某些类的时候只想包含静态方法和静态域，例如java.lang.Math，这些类不希望被实例化，因此可以让这个类包含私有构造器，并且在构造函数中throw new assertionError()]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, effective Java, 读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Effective Java读书笔记-3]]></title>
    <url>%2F2018%2F03%2F28%2Feffective-java-3%2F</url>
    <content type="text"><![CDATA[用私有构造器或者枚举类型强化singleton属性 方法1，公有静态成员是个final域。但是，享有特权的客户端可以用AccessibleObject.setAccessible方法，通过反射调用私有构造器，为了抵御这种攻击，可以修改构造器 1234567// Singleton with public field public class Elvis &#123; public static final Elvis INSTANCE = new Elvis(); private Elvis() &#123; ... &#125; public void leaveTheBuilding() &#123; ... &#125; &#125; 方法2，静态工厂方法。方法1的攻击依然存在。对于可序列化，为了保证singleton，必须声明transient，并提供readResolve方法 1234567public class Elvis &#123; private static final Elvis INSTANCE = new Elvis(); private Elvis() &#123; ... &#125; public static Elvis getInstance() &#123; return INSTANCE; &#125; public void leaveTheBuilding() &#123; ... &#125;&#125; 方法3，枚举类。更简洁，绝对安全，最佳方法。 12345public enum Elvis &#123; INSTANCE; public void leaveTheBuilding() &#123; ... &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, effective Java, 读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Effective Java读书笔记-2]]></title>
    <url>%2F2018%2F03%2F26%2Feffective-java-2%2F</url>
    <content type="text"><![CDATA[遇到多个构造器参数时要考虑用构建器在一个有很多变量的类中，无论是使用重叠构造器模式（telescoping constructor），还是Java bean，都不能保证安全性和可读性。推荐使用builder模式来构造12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758public class NutritionFacts &#123; private final int servingSize; private final int servings; private final int calories; private final int fat; private final int sodium; private final int carbohydrate; public static class Builder &#123; // Required parameters private final int servingSize; private final int servings; // Optional parameters - initialized to default values private int calories = 0; private int fat = 0; private int sodium = 0; private int carbohydrate = 0; public Builder(int servingSize, int servings) &#123; this.servingSize = servingSize; this.servings = servings; &#125; public Builder calories(int val) &#123; calories = val; return this; &#125; public Builder fat(int val) &#123; fat = val; return this; &#125; public Builder sodium(int val) &#123; sodium = val; return this; &#125; public Builder carbohydrate(int val) &#123; carbohydrate = val; return this; &#125; public NutritionFacts build() &#123; return new NutritionFacts(this); &#125; &#125; private NutritionFacts(Builder builder) &#123; servingSize = builder.servingSize; servings = builder.servings; calories = builder.calories; fat = builder.fat; sodium = builder.sodium; carbohydrate = builder.carbohydrate; &#125;&#125; 调用12NutritionFacts cocaCola = new NutritionFacts.Builder(240, 8) .calories(100).sodium(35).carbohydrate(27).build();]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, effective Java, 读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Effective Java读书笔记-1]]></title>
    <url>%2F2018%2F03%2F25%2Feffective-java-1%2F</url>
    <content type="text"><![CDATA[创建和销毁对象考虑用静态工厂方法代替构造器除了公有的构造函数，类可以提供一个公有的静态工厂方法，它是一个返回类的实例的静态方法。123public static Boolean valueOf(boolean b)&#123; return b?Boolean.TRUE:Boolean FALSE;&#125; 优点 静态工厂方法在方法命名上更具有可读性 静态工厂方法不需要每次在被调用的时候都构造一个新的对象，例如Boolean.valueOf(boolean)，节省创建对象的开销 静态工厂方法还可以返回该类型的子类对象，例如Java collection framework API比导出32个独立公有类的实现方式小得多 静态工厂方法还可以简化参数化类型的对象创建（目前JDK已经优化）Map map = new HashMap&lt;&gt;(); 缺点 类如果不含有公有的或者受保护的构造器，就不能被子类实例化 与其他静态方法没有区别，因此最好使用惯用名称命名——valueOf, of, getInstance, newInstance, getType, newType]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java, effective Java, 读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Numpy 语法基础]]></title>
    <url>%2F2018%2F01%2F01%2Fnumpy-basic%2F</url>
    <content type="text"><![CDATA[Numpy 语法基础 array123456789101112import numpy as npa = np.array([1, 2, 3]) # Create a rank 1 arrayprint(type(a)) # Prints "&lt;class 'numpy.ndarray'&gt;"print(a.shape) # Prints "(3,)"print(a[0], a[1], a[2]) # Prints "1 2 3"a[0] = 5 # Change an element of the arrayprint(a) # Prints "[5, 2, 3]"b = np.array([[1,2,3],[4,5,6]]) # Create a rank 2 arrayprint(b.shape) # Prints "(2, 3)"print(b[0, 0], b[0, 1], b[1, 0]) # Prints "1 2 4” 1234567891011121314151617181920import numpy as npa = np.zeros((2,2)) # Create an array of all zerosprint(a) # Prints "[[ 0. 0.] # [ 0. 0.]]"b = np.ones((1,2)) # Create an array of all onesprint(b) # Prints "[[ 1. 1.]]"c = np.full((2,2), 7) # Create a constant arrayprint(c) # Prints "[[ 7. 7.] # [ 7. 7.]]"d = np.eye(2) # Create a 2x2 identity matrixprint(d) # Prints "[[ 1. 0.] # [ 0. 1.]]"e = np.random.random((2,2)) # Create an array filled with random valuesprint(e) # Might print "[[ 0.91940167 0.08143941] # [ 0.68744134 0.87236687]]” array indexing1234567891011121314151617181920212223242526272829303132333435363738394041424344import numpy as np# Create the following rank 2 array with shape (3, 4)# [[ 1 2 3 4]# [ 5 6 7 8]# [ 9 10 11 12]]a = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])# Use slicing to pull out the subarray consisting of the first 2 rows# and columns 1 and 2; b is the following array of shape (2, 2):# [[2 3]# [6 7]]b = a[:2, 1:3]# A slice of an array is a view into the same data, so modifying it# will modify the original array.print(a[0, 1]) # Prints "2"b[0, 0] = 77 # b[0, 0] is the same piece of data as a[0, 1]print(a[0, 1]) # Prints “77"import numpy as np# Create the following rank 2 array with shape (3, 4)# [[ 1 2 3 4]# [ 5 6 7 8]# [ 9 10 11 12]]a = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])# Two ways of accessing the data in the middle row of the array.# Mixing integer indexing with slices yields an array of lower rank,# while using only slices yields an array of the same rank as the# original array:row_r1 = a[1, :] # Rank 1 view of the second row of arow_r2 = a[1:2, :] # Rank 2 view of the second row of aprint(row_r1, row_r1.shape) # Prints "[5 6 7 8] (4,)"print(row_r2, row_r2.shape) # Prints "[[5 6 7 8]] (1, 4)"# We can make the same distinction when accessing columns of an array:col_r1 = a[:, 1]col_r2 = a[:, 1:2]print(col_r1, col_r1.shape) # Prints "[ 2 6 10] (3,)"print(col_r2, col_r2.shape) # Prints "[[ 2] # [ 6] # [10]] (3, 1)” 1234567891011121314151617import numpy as npa = np.array([[1,2], [3, 4], [5, 6]])# An example of integer array indexing.# The returned array will have shape (3,) andprint(a[[0, 1, 2], [0, 1, 0]]) # Prints "[1 4 5]"# The above example of integer array indexing is equivalent to this:print(np.array([a[0, 0], a[1, 1], a[2, 0]])) # Prints "[1 4 5]"# When using integer array indexing, you can reuse the same# element from the source array:print(a[[0, 0], [1, 1]]) # Prints "[2 2]"# Equivalent to the previous integer array indexing exampleprint(np.array([a[0, 1], a[0, 1]])) # Prints "[2 2]” 1234567891011121314151617181920212223import numpy as np# Create a new array from which we will select elementsa = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])print(a) # prints "array([[ 1, 2, 3], # [ 4, 5, 6], # [ 7, 8, 9], # [10, 11, 12]])"# Create an array of indicesb = np.array([0, 2, 0, 1])# Select one element from each row of a using the indices in bprint(a[np.arange(4), b]) # Prints "[ 1 6 7 11]"# Mutate one element from each row of a using the indices in ba[np.arange(4), b] += 10print(a) # prints "array([[11, 2, 3], # [ 4, 5, 16], # [17, 8, 9], # [10, 21, 12]]) array math123456789101112131415161718192021222324252627282930313233import numpy as npx = np.array([[1,2],[3,4]], dtype=np.float64)y = np.array([[5,6],[7,8]], dtype=np.float64)# Elementwise sum; both produce the array# [[ 6.0 8.0]# [10.0 12.0]]print(x + y)print(np.add(x, y))# Elementwise difference; both produce the array# [[-4.0 -4.0]# [-4.0 -4.0]]print(x - y)print(np.subtract(x, y))# Elementwise product; both produce the array# [[ 5.0 12.0]# [21.0 32.0]]print(x * y)print(np.multiply(x, y))# Elementwise division; both produce the array# [[ 0.2 0.33333333]# [ 0.42857143 0.5 ]]print(x / y)print(np.divide(x, y))# Elementwise square root; produces the array# [[ 1. 1.41421356]# [ 1.73205081 2. ]]print(np.sqrt(x)) 123456789101112131415161718192021import numpy as npx = np.array([[1,2],[3,4]])y = np.array([[5,6],[7,8]])v = np.array([9,10])w = np.array([11, 12])# Inner product of vectors; both produce 219print(v.dot(w))print(np.dot(v, w))# Matrix / vector product; both produce the rank 1 array [29 67]print(x.dot(v))print(np.dot(x, v))# Matrix / matrix product; both produce the rank 2 array# [[19 22]# [43 50]]print(x.dot(y))print(np.dot(x, y)) 1234567import numpy as npx = np.array([[1,2],[3,4]])print(np.sum(x)) # Compute sum of all elements; prints "10"print(np.sum(x, axis=0)) # Compute sum of each column; prints "[4 6]"print(np.sum(x, axis=1)) # Compute sum of each row; prints "[3 7]” 123456789101112import numpy as npx = np.array([[1,2], [3,4]])print(x) # Prints "[[1 2] # [3 4]]"print(x.T) # Prints "[[1 3] # [2 4]]"# Note that taking the transpose of a rank 1 array does nothing:v = np.array([1,2,3])print(v) # Prints "[1 2 3]"print(v.T) # Prints "[1 2 3]" broadcast123456789101112131415161718import numpy as np# We will add the vector v to each row of the matrix x,# storing the result in the matrix yx = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])v = np.array([1, 0, 1])y = np.empty_like(x) # Create an empty matrix with the same shape as x# Add the vector v to each row of the matrix x with an explicit loopfor i in range(4): y[i, :] = x[i, :] + v# Now y is the following# [[ 2 2 4]# [ 5 5 7]# [ 8 8 10]# [11 11 13]]print(y) 12345678910111213141516import numpy as np# We will add the vector v to each row of the matrix x,# storing the result in the matrix yx = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])v = np.array([1, 0, 1])vv = np.tile(v, (4, 1)) # Stack 4 copies of v on top of each otherprint(vv) # Prints "[[1 0 1] # [1 0 1] # [1 0 1] # [1 0 1]]"y = x + vv # Add x and vv elementwiseprint(y) # Prints "[[ 2 2 4 # [ 5 5 7] # [ 8 8 10] # [11 11 13]]” 1234567891011import numpy as np# We will add the vector v to each row of the matrix x,# storing the result in the matrix yx = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])v = np.array([1, 0, 1])y = x + v # Add v to each row of x using broadcastingprint(y) # Prints "[[ 2 2 4] # [ 5 5 7] # [ 8 8 10] # [11 11 13]]"]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python, Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python 语法基础]]></title>
    <url>%2F2018%2F01%2F01%2Fpython-basic%2F</url>
    <content type="text"><![CDATA[Python 语法基础 整理归纳自 CS231nThis tutorial was contributed by Justin Johnson. basic types1234567891011121314x = 3print(type(x)) # Prints "&lt;class 'int'&gt;"print(x) # Prints "3"print(x + 1) # Addition; prints "4"print(x - 1) # Subtraction; prints "2"print(x * 2) # Multiplication; prints "6"print(x ** 2) # Exponentiation; prints "9"x += 1print(x) # Prints "4"x *= 2print(x) # Prints "8"y = 2.5print(type(y)) # Prints "&lt;class 'float'&gt;"print(y, y + 1, y * 2, y ** 2) # Prints "2.5 3.5 5.0 6.25" string12345678910111213141516hello = 'hello' # String literals can use single quotesworld = "world" # or double quotes; it does not matter.print(hello) # Prints "hello"print(len(hello)) # String length; prints "5"hw = hello + ' ' + world # String concatenationprint(hw) # prints "hello world"hw12 = '%s %s %d' % (hello, world, 12) # sprintf style string formattingprint(hw12) # prints "hello world 12"s = "hello"print(s.capitalize()) # Capitalize a string; prints "Hello"print(s.upper()) # Convert a string to uppercase; prints "HELLO"print(s.rjust(7)) # Right-justify a string, padding with spaces; prints " hello"print(s.center(7)) # Center a string, padding with spaces; prints " hello "print(s.replace('l', '(ell)')) # Replace all instances of one substring with another; # prints "he(ell)(ell)o"print(' world '.strip()) # Strip leading and trailing whitespace; prints "world" containerlist123456789xs = [3, 1, 2] # Create a listprint(xs, xs[2]) # Prints "[3, 1, 2] 2"print(xs[-1]) # Negative indices count from the end of the list; prints "2"xs[2] = 'foo' # Lists can contain elements of different typesprint(xs) # Prints "[3, 1, 'foo']"xs.append('bar') # Add a new element to the end of the listprint(xs) # Prints "[3, 1, 'foo', 'bar']"x = xs.pop() # Remove and return the last element of the listprint(x, xs) # Prints "bar [3, 1, 'foo']" slicing123456789nums = list(range(5)) # range is a built-in function that creates a list of integersprint(nums) # Prints "[0, 1, 2, 3, 4]"print(nums[2:4]) # Get a slice from index 2 to 4 (exclusive); prints "[2, 3]"print(nums[2:]) # Get a slice from index 2 to the end; prints "[2, 3, 4]"print(nums[:2]) # Get a slice from the start to index 2 (exclusive); prints "[0, 1]"print(nums[:]) # Get a slice of the whole list; prints "[0, 1, 2, 3, 4]"print(nums[:-1]) # Slice indices can be negative; prints "[0, 1, 2, 3]"nums[2:4] = [8, 9] # Assign a new sublist to a sliceprint(nums) # Prints "[0, 1, 8, 9, 4]” loops1234animals = ['cat', 'dog', 'monkey']for animal in animals: print(animal)# Prints "cat", "dog", "monkey", each on its own line. If you want access to the index of each element within the body of a loop, use the built-in enumerate function:1234animals = ['cat', 'dog', 'monkey']for idx, animal in enumerate(animals): print('#%d: %s' % (idx + 1, animal))# Prints "#1: cat", "#2: dog", "#3: monkey", each on its own line list comprehension12345nums = [0, 1, 2, 3, 4]squares = []for x in nums: squares.append(x ** 2)print(squares) # Prints [0, 1, 4, 9, 16] You can make this code simpler using a list comprehension:123nums = [0, 1, 2, 3, 4]squares = [x ** 2 for x in nums]print(squares) # Prints [0, 1, 4, 9, 16] List comprehensions can also contain conditions:123nums = [0, 1, 2, 3, 4]even_squares = [x ** 2 for x in nums if x % 2 == 0]print(even_squares) # Prints "[0, 4, 16]” dictionary1234567891011121314151617181920d = &#123;'cat': 'cute', 'dog': 'furry'&#125; # Create a new dictionary with some dataprint(d['cat']) # Get an entry from a dictionary; prints "cute"print('cat' in d) # Check if a dictionary has a given key; prints "True"d['fish'] = 'wet' # Set an entry in a dictionaryprint(d['fish']) # Prints "wet"# print(d['monkey']) # KeyError: 'monkey' not a key of dprint(d.get('monkey', 'N/A')) # Get an element with a default; prints "N/A"print(d.get('fish', 'N/A')) # Get an element with a default; prints "wet"del d['fish'] # Remove an element from a dictionaryprint(d.get('fish', 'N/A')) # "fish" is no longer a key; prints "N/A"d = &#123;'person': 2, 'cat': 4, 'spider': 8&#125;for animal, legs in d.items(): print('A %s has %d legs' % (animal, legs))# Prints "A person has 2 legs", "A cat has 4 legs", "A spider has 8 legs"Dictionary comprehensions: These are similar to list comprehensions, but allow you to easily construct dictionaries. For example:nums = [0, 1, 2, 3, 4]even_num_to_square = &#123;x: x ** 2 for x in nums if x % 2 == 0&#125;print(even_num_to_square) # Prints "&#123;0: 0, 2: 4, 4: 16&#125;” sets12345678910animals = &#123;'cat', 'dog'&#125;print('cat' in animals) # Check if an element is in a set; prints "True"print('fish' in animals) # prints "False"animals.add('fish') # Add an element to a setprint('fish' in animals) # Prints "True"print(len(animals)) # Number of elements in a set; prints "3"animals.add('cat') # Adding an element that is already in the set does nothingprint(len(animals)) # Prints "3"animals.remove('cat') # Remove an element from a setprint(len(animals)) # Prints “2" tuples12345d = &#123;(x, x + 1): x for x in range(10)&#125; # Create a dictionary with tuple keyst = (5, 6) # Create a tupleprint(type(t)) # Prints "&lt;class 'tuple'&gt;"print(d[t]) # Prints "5"print(d[(1, 2)]) # Prints “1"]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown 语法笔记]]></title>
    <url>%2F2017%2F12%2F31%2Fmarkdown%2F</url>
    <content type="text"><![CDATA[Markdown是一种极简的『标记语言』之前做读书笔记，基本都是随手记录，苦于不想花时间在排版上，但是不排版的后果是笔记没有层次感。Markdown正是我需要的东西。 语法笔记如下 区块元素段落和换行一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行。 标题类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶。例如 # 这是 H1## 这是 H2 区块引用 BlockquotesMarkdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ：Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt;区块引用可以嵌套引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：例如 > This is the first level of quoting.>> > This is nested blockquote.>> Back to the first level. 效果 This is the first level of quoting. This is nested blockquote. Back to the first level. 列表无序列表使用星号、加号或是减号作为列表标记：有序列表则使用数字接着一个英文句点： * Red* Green* Blue 效果 Red Green Blue 代码区块要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以 分隔线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。 区段元素链接要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可。例如 This is an example inline link. 参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：例如 This is [an example][id] reference-style link.接着，在文件的任意处，你可以把这个标记的链接内容定义出来：[id]: http://example.com/ “Optional Title Here” 强调Markdown 使用星号（）和底线（_）作为标记强调字词的符号，被 或 包围的字词会被转成斜体，用两个 * 或 包起来的话，则会被转成粗体，例如： *single asterisks*_single underscores_**double asterisks**__double underscores__ 效果 single asteriskssingle underscoresdouble asterisksdouble underscores 代码如果要标记一小段行内代码，你可以用反引号把它包起来（`），例如： Use the `printf()` function. 效果 Use the printf() function. 图片Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。行内式的图片语法看起来像是： ![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg “Optional title”) 其它自动链接Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样。 反斜杠Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号。 \ 反斜线` 反引号* 星号_ 底线{} 花括号[] 方括号() 括弧# 井字号+ 加号- 减号. 英文句点! 惊叹号]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
